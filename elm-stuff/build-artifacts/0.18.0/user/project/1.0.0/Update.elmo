var _user$project$Update$fetchSchedules = function (stop) {
	return {
		ctor: '::',
		_0: A2(_user$project$FetchSchedule$fetchSchedule, _user$project$Types$Inbound, stop),
		_1: {
			ctor: '::',
			_0: A2(_user$project$FetchSchedule$fetchSchedule, _user$project$Types$Outbound, stop),
			_1: {ctor: '[]'}
		}
	};
};
var _user$project$Update$toggleDirection = function (direction) {
	var _p0 = direction;
	if (_p0.ctor === 'Inbound') {
		return _user$project$Types$Outbound;
	} else {
		return _user$project$Types$Inbound;
	}
};
var _user$project$Update$stopKey = 'stop';
var _user$project$Update$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'ChangeDirection':
				var newDirection = _user$project$Update$toggleDirection(model.direction);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{direction: newDirection}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PickStop':
				var _p2 = _p1._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							selectedStop: _elm_lang$core$Maybe$Just(_p2),
							stopPickerOpen: false,
							inboundSchedule: _user$project$Types$Loading,
							outboundSchedule: _user$project$Types$Loading
						}),
					_1: _elm_lang$core$Platform_Cmd$batch(
						A2(
							_elm_lang$core$Basics_ops['++'],
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Task$attempt,
									_user$project$Message$SetItem,
									A2(_elm_native_ui$elm_native_ui$NativeUi_AsyncStorage$setItem, _user$project$Update$stopKey, _p2)),
								_1: {ctor: '[]'}
							},
							_user$project$Update$fetchSchedules(_p2)))
				};
			case 'GetItem':
				var _p3 = _p1._0;
				if (_p3.ctor === 'Ok') {
					if (_p3._0.ctor === 'Nothing') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						var _p4 = _p3._0._0;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									selectedStop: _elm_lang$core$Maybe$Just(_p4)
								}),
							_1: _elm_lang$core$Platform_Cmd$batch(
								_user$project$Update$fetchSchedules(_p4))
						};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'SetItem':
				var _p5 = _p1._0;
				if (_p5.ctor === 'Ok') {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'LoadStops':
				var _p6 = _p1._0;
				if (_p6.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								stops: _user$project$Types$Ready(_p6._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'LoadSchedule':
				var _p7 = _p1._1;
				if (_p7.ctor === 'Ok') {
					var _p9 = _p7._0;
					var _p8 = _p1._0;
					if (_p8.ctor === 'Inbound') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									inboundSchedule: _user$project$Types$Ready(_p9)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{
									outboundSchedule: _user$project$Types$Ready(_p9)
								}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					}
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'ToggleStopPicker':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{stopPickerOpen: !model.stopPickerOpen}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							now: _elm_lang$core$Date$fromTime(_p1._0)
						}),
					_1: A2(
						_elm_lang$core$Task$attempt,
						_user$project$Message$GetItem,
						_elm_native_ui$elm_native_ui$NativeUi_AsyncStorage$getItem(_user$project$Update$stopKey))
				};
		}
	});
