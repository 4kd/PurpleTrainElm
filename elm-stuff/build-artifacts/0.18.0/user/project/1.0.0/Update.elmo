var _user$project$Update$toggleDirection = function (direction) {
	var _p0 = direction;
	if (_p0.ctor === 'Inbound') {
		return _user$project$Types$Outbound;
	} else {
		return _user$project$Types$Inbound;
	}
};
var _user$project$Update$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p1 = msg;
			switch (_p1.ctor) {
				case 'StopPickerMsg':
					if (_p1._0.ctor === 'External') {
						var _v2 = _user$project$StopPicker_Translate$translate(_p1._0._0),
							_v3 = model;
						msg = _v2;
						model = _v3;
						continue update;
					} else {
						var _p2 = A2(_user$project$StopPicker_Update$update, _p1._0._0, model.stopPicker);
						var updatedStopPicker = _p2._0;
						var stopPickerCmd = _p2._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{stopPicker: updatedStopPicker}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Message$StopPickerMsg, stopPickerCmd)
						};
					}
				case 'ChangeDirection':
					var newDirection = _user$project$Update$toggleDirection(model.direction);
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{direction: newDirection}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				case 'PickStop':
					var _p3 = _p1._0;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								selectedRouteStop: _elm_lang$core$Maybe$Just(_p3),
								stopPickerOpen: false
							}),
						_1: _elm_lang$core$Platform_Cmd$batch(
							{
								ctor: '::',
								_0: A2(
									_elm_lang$core$Task$attempt,
									_user$project$Message$SetItem,
									A2(
										_elm_native_ui$elm_native_ui$NativeUi_AsyncStorage$setItem,
										'routeStop',
										A2(
											_elm_lang$core$Basics_ops['++'],
											_p3.route.id,
											A2(_elm_lang$core$Basics_ops['++'], '@', _p3.stop)))),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$FetchSchedule$fetchSchedule,
										model.direction,
										_elm_lang$core$Maybe$Just(_p3)),
									_1: {ctor: '[]'}
								}
							})
					};
				case 'GetItem':
					var _p4 = _p1._0;
					if (_p4.ctor === 'Ok') {
						if (_p4._0.ctor === 'Nothing') {
							return {ctor: '_Tuple2', _0: model, _1: _user$project$FetchRoutes$fetchRoutes};
						} else {
							var routeStop = function () {
								var _p5 = A2(_elm_lang$core$String$split, '@', _p4._0._0);
								if (((_p5.ctor === '::') && (_p5._1.ctor === '::')) && (_p5._1._1.ctor === '[]')) {
									return _elm_lang$core$Maybe$Just(
										A2(
											_user$project$Types$RouteStop,
											A3(
												_user$project$Types$Route,
												'asdf',
												{ctor: '[]'},
												_p5._0),
											_p5._1._0));
								} else {
									return _elm_lang$core$Maybe$Nothing;
								}
							}();
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{selectedRouteStop: routeStop}),
								_1: _elm_lang$core$Platform_Cmd$batch(
									{
										ctor: '::',
										_0: _user$project$FetchRoutes$fetchRoutes,
										_1: {
											ctor: '::',
											_0: A2(_user$project$FetchSchedule$fetchSchedule, model.direction, routeStop),
											_1: {ctor: '[]'}
										}
									})
							};
						}
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _user$project$FetchRoutes$fetchRoutes};
					}
				case 'SetItem':
					var _p6 = _p1._0;
					if (_p6.ctor === 'Ok') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'LoadRoutes':
					var _p7 = _p1._0;
					if (_p7.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{routes: _p7._0}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'LoadSchedule':
					var _p8 = _p1._1;
					if (_p8.ctor === 'Ok') {
						var _p10 = _p8._0;
						var _p9 = _p1._0;
						if (_p9.ctor === 'Inbound') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{inboundSchedule: _p10}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									model,
									{outboundSchedule: _p10}),
								_1: _elm_lang$core$Platform_Cmd$none
							};
						}
					} else {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'ToggleStopPicker':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{stopPickerOpen: !model.stopPickerOpen}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								now: _elm_lang$core$Date$fromTime(_p1._0)
							}),
						_1: A2(
							_elm_lang$core$Task$attempt,
							_user$project$Message$GetItem,
							_elm_native_ui$elm_native_ui$NativeUi_AsyncStorage$getItem('routeStop'))
					};
			}
		}
	});
