var _user$project$Main$train = function (train) {
	return A2(
		_elm_native_ui$elm_native_ui$NativeUi_Elements$text,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_native_ui$elm_native_ui$NativeUi$string(train.time)
			]));
};
var _user$project$Main$trains = function (schedule) {
	return A2(
		_elm_native_ui$elm_native_ui$NativeUi_Elements$view,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(_elm_lang$core$List$map, _user$project$Main$train, schedule));
};
var _user$project$Main$stationStyle = F2(
	function (selectedStation, station) {
		return _elm_lang$core$Native_Utils.eq(
			selectedStation,
			_elm_lang$core$Maybe$Just(station)) ? _elm_lang$core$Native_List.fromArray(
			[
				_elm_native_ui$elm_native_ui$NativeUi_Style$color('red')
			]) : _elm_lang$core$Native_List.fromArray(
			[]);
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{
					selectedStation: _elm_lang$core$Maybe$Just(_p0._0)
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _user$project$Main$stations = function (schedule) {
	return _elm_lang$core$Set$toList(
		_elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.station;
				},
				schedule)));
};
var _user$project$Main$initialSchedule = _elm_lang$core$Native_List.fromArray(
	[
		{time: '1pm', station: 'Davis Square'},
		{time: '2pm', station: 'Alewife'},
		{time: '3pm', station: 'Central Square'},
		{time: '4pm', station: 'Downtown Crossing'},
		{time: '4pm', station: 'Alewife'},
		{time: '5pm', station: 'Park St.'},
		{time: '6pm', station: 'Park St.'}
	]);
var _user$project$Main$model = {schedule: _user$project$Main$initialSchedule, selectedStation: _elm_lang$core$Maybe$Nothing};
var _user$project$Main$Train = F2(
	function (a, b) {
		return {time: a, station: b};
	});
var _user$project$Main$Model = F2(
	function (a, b) {
		return {schedule: a, selectedStation: b};
	});
var _user$project$Main$PickStation = function (a) {
	return {ctor: 'PickStation', _0: a};
};
var _user$project$Main$stationButton = F2(
	function (selectedStation, station) {
		return A2(
			_elm_native_ui$elm_native_ui$NativeUi_Elements$text,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_native_ui$elm_native_ui$NativeUi$style(
					A2(_user$project$Main$stationStyle, selectedStation, station)),
					_elm_native_ui$elm_native_ui$NativeUi_Events$onPress(
					_user$project$Main$PickStation(station))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_native_ui$elm_native_ui$NativeUi$string(station)
				]));
	});
var _user$project$Main$stationPicker = function (_p1) {
	var _p2 = _p1;
	return A2(
		_elm_native_ui$elm_native_ui$NativeUi_Elements$view,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$map,
			_user$project$Main$stationButton(_p2.selectedStation),
			_user$project$Main$stations(_p2.schedule)));
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_native_ui$elm_native_ui$NativeUi_Elements$view,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_native_ui$elm_native_ui$NativeUi$style(
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_native_ui$elm_native_ui$NativeUi_Style$alignItems('center')
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$Main$trains(model.schedule),
				_user$project$Main$stationPicker(model)
			]));
};
var _user$project$Main$main = _elm_native_ui$elm_native_ui$NativeUi$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: function (_p3) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
